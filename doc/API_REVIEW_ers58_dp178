API Review
===
## Part 1
1. What about your API/design is intended to be flexible?

    * Adding new commands should be easily done, as should adding new turtles or new languages.

2. How is your API/design encapsulating your implementation decisions?

    * We focused on separating elements as much as possible, so our classes should be relatively relatively small and self-contained with few dependencies.
    
3. What exceptions (error cases) might occur in your part and how will you handle them (or not, by throwing)?

    * Within my part, we will have to process invalid input from the command window. We will handle the errors with popup windows explaining the issue.

4. Why do you think your API/design is good (also define what your measure of good is)?

    * I like that our API/design is separated, with each class only responsible for one major task. I also like the structure of our classes and our use of design patterns and Java techniques (like strategy pattern, MVC, and reflection)

## Part 2
1. How do you think Design Patterns are currently represented in the design or could be used to help improve the design?

    * MVC is used to manage commands creation and execution.
    * MVC is also used to update the History and Variables in response to command input.


2. What feature/design problem are you most excited to work on?

    * I'm excited to sync user input at the front end with the parsing/command parsing on the back end.

3. What feature/design problem are you most worried about working on?

    * I'm intimidated by the problem of switching languages.

4. Come up with at least five use cases for your part (it is absolutely fine if they are useful for both teams).

    * Change language from English to French
    * Move the turtle within a loop
    * Scroll within the canvas to follow the turtle
    * Incorporate variables into our commands
    * Change the color of the canvas